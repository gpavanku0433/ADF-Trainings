{
	"name": "pipeline3",
	"properties": {
		"activities": [
			{
				"name": "Logstatus",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[usp_logstatus]",
					"storedProcedureParameters": {
						"pipelinestatus": {
							"value": {
								"value": "Started",
								"type": "Expression"
							},
							"type": "String"
						},
						"piperunid": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SQLServer_HRP",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Processing the data",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Logstatus",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DS_Employee",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Archiving the data",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Processing the data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DS_Archive",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Logstatus Completed",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Archiving the data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[usp_logstatus]",
					"storedProcedureParameters": {
						"pipelinestatus": {
							"value": {
								"value": "Completed",
								"type": "Expression"
							},
							"type": "String"
						},
						"piperunid": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SQLServer_HRP",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Capture Error Message",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Logstatus Completed",
						"dependencyConditions": [
							"Failed",
							"Skipped"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "Errormessage",
					"value": {
						"value": "@concat(activity('Processing the data')?.Error?.Message,activity('Archiving the data')?.Error?.Message)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Error Log",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Capture Error Message",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[usp_errorlog]",
					"storedProcedureParameters": {
						"error_message": {
							"value": {
								"value": "@variables('Errormessage')",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipelinerunid": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SQLServer_HRP",
					"type": "LinkedServiceReference"
				}
			}
		],
		"variables": {
			"Errormessage": {
				"type": "String"
			}
		},
		"annotations": []
	}
}